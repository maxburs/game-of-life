{"version":3,"sources":["../src/game-of-life.js"],"names":["baseStyle","backgroundColor","color","document","onload","console","log","styleSheets","GameOfLife","React","createClass","getInitialState","height","width","interval","pause","boardKey","percentLife","generations","nextHeight","nextWidth","handleChange","event","newState","target","name","value","checked","setState","empty","resetBoard","state","incrementGenereations","render","style","Board","undefined","props","window","setInterval","update","initialCellValues","size","i","push","Math","random","status","cellNeighbors","buildCellNeighbors","cellCount","cellStyle","componentWillReceiveProps","nextProps","clearInterval","currentNeighbors","top","left","right","bottom","newStatus","neighbors","p","editCell","cell","componentWillUnmount","cells","map","alive","index","FixedRatio","visibility","domNode","componentDidMount","remeasure","addEventListener","removeEventListener","clearTimeout","remeasureTimeout","setTimeout","run","bind","offsetWidth","offsetHeight","ratio","margin","paddingTop","newProps","updateDOMRef","node","childComponents","Cell","Controls","vPad","hPad","elementStyle","verticalAlign","display","buttonStyle","Object","assign","fontSize","border","cursor","padding","textInputStyle","textAlign","sliderStyle","position","maxWidth","overflow","toFixed","Switch","onChange","ReactDOM","getElementById"],"mappings":"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","file":"game-of-life.js","sourcesContent":["var baseStyle = {\r\n    backgroundColor: \"rgb(50, 50, 50)\",\r\n    color: \"rgb(240, 240, 240)\",\r\n};\r\ndocument.onload = console.log(document.styleSheets);\r\n\r\n//parent component, renders board and controls and connects the two\r\nvar GameOfLife = React.createClass({\r\n    //default board and control state\r\n    getInitialState: function(){\r\n        return {\r\n            height: 25,\r\n            width: 25,\r\n            interval: 500,\r\n            pause: false,\r\n            boardKey: 0,\r\n            percentLife: 0.3,\r\n            generations: 0,\r\n            nextHeight: 20,\r\n            nextWidth: 20\r\n        };\r\n    },\r\n    //handles changes from input\r\n    handleChange: function(event){\r\n        var newState = {};\r\n        \r\n        if (event.target.name === \"interval\") {\r\n            //interval is set in second and needs to be converted to milliseconds\r\n            newState[event.target.name] = event.target.value * 1000;\r\n        }\r\n        else if (event.target.name === \"pause\") {\r\n            newState.pause = event.target.checked;\r\n        }\r\n        else if (event.target.name === \"randomize\") {\r\n            this.setState({empty: false}, this.resetBoard);\r\n        }\r\n        else if (event.target.name === \"clear\"){\r\n            this.setState({empty: true}, this.resetBoard);\r\n        }\r\n        else if (event.target.name === \"width\"){\r\n            this.setState({nextWidth: +event.target.value});\r\n        }\r\n        else if (event.target.name === \"height\"){\r\n            this.setState({nextHeight: +event.target.value});\r\n        }\r\n        else if (event.target.name === \"percentLife\"){\r\n            newState.percentLife = event.target.value;\r\n        }\r\n        else if (event.target.name === \"resetGenerations\"){\r\n            newState.generations = 0;\r\n        }\r\n        else if (event.target.name === \"applySize\"){\r\n            console.log(\"this.state: \", this.state);\r\n            this.setState({\r\n                height: this.state.nextHeight,\r\n                width: this.state.nextWidth\r\n            }, this.resetBoard);\r\n        }\r\n        this.setState(newState);\r\n    },\r\n    //increases the generation count by one\r\n    incrementGenereations: function(){\r\n        this.setState({generations: this.state.generations + 1});\r\n    },\r\n    resetBoard: function(){\r\n        this.setState({boardKey: this.state.boardKey + 1, generations: 0});\r\n    },\r\n    render: function(){\r\n        var style = {\r\n            height: \"100%\",\r\n            width: \"100%\",\r\n            backgroundColor: baseStyle.backgroundColor\r\n        };\r\n        return <div id=\"game-of-life\">\r\n            <div id=\"display\" >\r\n                <FixedRatio\r\n                    childComponents={(\r\n                        <Board\r\n                            height={this.state.height}\r\n                            width={this.state.width}\r\n                            interval={this.state.interval}\r\n                            pause={this.state.pause}\r\n                            percentLife={this.state.percentLife}\r\n                            empty={this.state.empty}\r\n                            key={this.state.boardKey}\r\n                            incrementGenereations={this.incrementGenereations}\r\n                        />\r\n                    )}\r\n                    ratio={this.state.width/this.state.height}\r\n                />\r\n            </div>\r\n            <Controls\r\n                handleChange={this.handleChange}\r\n                height={this.state.nextHeight}\r\n                width={this.state.nextWidth}\r\n                interval={this.state.interval}\r\n                pause={this.state.pause}\r\n                percentLife={this.state.percentLife}\r\n                generations={this.state.generations}\r\n                />\r\n            </div>;\r\n    }\r\n});\r\n//contains cells and game logic, accepts game parameters as props\r\n//props include: height={int}, width={int}, play={bool}, interval={float}, borderSize={int}\r\nvar Board = React.createClass({\r\n    getInitialState: function() {\r\n        //set inital board update rate if game is not paused\r\n        var interval = undefined;\r\n        if (this.props.pause === false) {\r\n            interval = window.setInterval(this.update, this.props.interval);\r\n        }\r\n\r\n        //build initial cell values\r\n        var initialCellValues = [];\r\n        var size = this.props.height * this.props.width;\r\n        for (var i=0; i < size; i++){\r\n            if (!this.props.empty){\r\n                initialCellValues.push(Math.random() < this.props.percentLife);\r\n            }\r\n            else {\r\n                initialCellValues.push(false);\r\n            }\r\n        }\r\n\r\n        return {\r\n            status: initialCellValues,\r\n            interval: interval,\r\n            cellNeighbors: this.buildCellNeighbors(),\r\n            cellCount: this.props.height * this.props.width,\r\n            cellStyle: {\r\n                width: 100/this.props.width + \"%\",\r\n                height: 100/this.props.height + \"%\",}};\r\n    },\r\n    //runs when prop(s) are updated\r\n    componentWillReceiveProps: function(nextProps){\r\n        window.clearInterval(this.state.interval);\r\n        var newState = {};\r\n        //if the new state isn't paused then once again set the interval\r\n        if (nextProps.pause === false){\r\n            newState.interval = window.setInterval(this.update, nextProps.interval);;\r\n        }\r\n        this.setState(newState);\r\n    },\r\n    //returns an array with filled with an array for each cell with the index of that cells neighbors\r\n    buildCellNeighbors: function(){\r\n        var cellNeighbors = [];\r\n        //this.state.status.forEach(function(alive, i, status){\r\n        for (var i = 0; i < this.props.height * this.props.width; i++) {\r\n            var currentNeighbors = [];\r\n            //determine if cell is on the top, left, right, or bottom of grid\r\n            var top = this.props.width - i > 0;\r\n            var left = i % this.props.width === 0;\r\n            var right = i % this.props.width === this.props.width - 1;\r\n            var bottom = (this.props.height - 1) * this.props.width < i + 1;\r\n            /*console.log(\"cell \" + i\r\n                + \"\\n   top: \" + top\r\n                + \"\\n   left: \" + left\r\n                + \"\\n   right: \" + right\r\n                + \"\\n   bottom: \" + bottom);*/\r\n            //for each potential neighbor, if that neighbor isn't off the grid then add it's index to the array\r\n            if (!top && !left){\r\n                currentNeighbors.push(i - this.props.width - 1);\r\n            }\r\n            if (!top){\r\n                currentNeighbors.push(i - this.props.width);\r\n            }\r\n            if (!top && !right){\r\n                currentNeighbors.push(i - this.props.width + 1);\r\n            }\r\n            if (!right){\r\n                currentNeighbors.push(i + 1);\r\n            }\r\n            if (!right && !bottom){\r\n                currentNeighbors.push(i + this.props.width + 1);\r\n            }\r\n            if (!bottom){\r\n                currentNeighbors.push(i + this.props.width);\r\n            }\r\n            if (!bottom && !left){\r\n                currentNeighbors.push(i + this.props.width - 1);\r\n            }\r\n            if (!left){\r\n                currentNeighbors.push(i - 1);\r\n            }\r\n            //console.log(\"neighbors: \" + currentNeighbors);\r\n            cellNeighbors.push(currentNeighbors);\r\n        }\r\n        return cellNeighbors;\r\n    },\r\n    //increments the game of life\r\n    update: function(){\r\n        //new game of life board status\r\n        var newStatus = [];\r\n        //loops though previous game board and pushes the status of cells to the new board one at a time\r\n        //this.state.status.forEach(function(alive, i, status){\r\n        for (var i in this.state.cellNeighbors){\r\n            var neighbors = 0;\r\n            //console.log(\"cell: \" + i);\r\n            for (var p in this.state.cellNeighbors[i]) {\r\n                if (this.state.status[this.state.cellNeighbors[i][p]]) {\r\n                    //console.log(\"   live neighbor at: \" + this.state.cellNeighbors[i][p]);\r\n                    neighbors++;\r\n                }\r\n            }\r\n            //console.log(\"   \" + neighbors + \" live neighbors\");\r\n            /*\r\n            RULES:\r\n            +  Any live cell with fewer than two live neighbours dies, as if caused by under-population.\r\n            +  Any live cell with two or three live neighbours lives on to the next generation.\r\n            +  Any live cell with more than three live neighbours dies, as if by over-population.\r\n            +  Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\r\n            following code executes rules\r\n            */\r\n            if (neighbors < 2){\r\n                newStatus.push(false);\r\n            }\r\n            else if (neighbors === 2){\r\n                if (this.state.status[i]){\r\n                    newStatus.push(true);\r\n                }\r\n                else {\r\n                    newStatus.push(false);\r\n                }\r\n            }\r\n            else if (neighbors === 3){\r\n                newStatus.push(true);\r\n            }\r\n            else {\r\n                newStatus.push(false);\r\n            }\r\n            //console.log(\"   new status: \", newStatus[newStatus.length - 1]);\r\n        };\r\n        //console.log(\"new status: \", newStatus);\r\n        this.props.incrementGenereations();\r\n        this.setState({status: newStatus});\r\n    },\r\n    editCell: function(cell){\r\n        this.state.status[cell] = !this.state.status[cell];\r\n        this.setState({status: this.state.status});\r\n    },\r\n    componentWillUnmount: function(){\r\n        window.clearInterval(this.state.interval);\r\n    },\r\n    render: function(){\r\n        var cells = this.state.status.map((alive, index) => {\r\n            return <Cell\r\n                    status={alive}\r\n                    style={this.state.cellStyle}\r\n                    key={index}\r\n                />;\r\n        });\r\n        return <div className=\"display-ratio-fixed\" >{cells}</div>;\r\n    }\r\n});\r\n//Creates a div of a given ratio (width/hight) as large as it can in the given context and then renders whatever is passed as the prop \"childComponents\" and it's children\". Has a 200ms resize timeout for performance.\r\n//props: include: ratio={width/height}, childComponents={compoenents to be rendered as children}\r\nvar FixedRatio = React.createClass({\r\n    getInitialState: function(){\r\n        return {style: {visibility: \"hidden\"}, domNode: undefined}\r\n    },\r\n    componentDidMount: function(){\r\n        this.remeasure();\r\n        window.addEventListener(\"resize\", this.remeasure);\r\n    },\r\n    componentWillUnmount: function(){\r\n        window.removeEventListener(\"resize\", this.remeasure);\r\n    },\r\n    remeasure: function(){\r\n        //timeout code so that we don't remeasure for every step while the window is being resized\r\n        window.clearTimeout(this.state.remeasureTimeout);\r\n        var remeasureTimeout = window.setTimeout(run.bind(this), 200);\r\n        this.setState({remeasureTimeout: remeasureTimeout})\r\n        function run(){\r\n            //if the context ratio is wider than the target ratio\r\n            if (this.state.domNode.offsetWidth / this.state.domNode.offsetHeight > this.props.ratio) {\r\n                this.setState({style: {\r\n                    height: this.state.domNode.offsetHeight + \"px\",\r\n                    width: (this.state.domNode.offsetHeight * this.props.ratio) + \"px\",\r\n                    margin: \"auto\"\r\n                }});\r\n            }\r\n            else {\r\n                this.setState({style: {\r\n                    height: (this.state.domNode.offsetWidth / this.props.ratio) + \"px\",\r\n                    width: this.state.domNode.offsetWidth,\r\n                    paddingTop: (this.state.domNode.offsetHeight - this.state.domNode.offsetWidth / this.props.ratio) / 2\r\n                }});\r\n            }\r\n        }\r\n    },\r\n    //if the ratio prop changes then remeasure, this is not in the \"render\" fuction because we do not want to remeaure when the childComponents prop changes\r\n    componentWillReceiveProps: function(newProps){\r\n        if (newProps.ratio !== this.props.ratio){\r\n            this.remeasure();\r\n        }\r\n    },\r\n    updateDOMRef: function(node){\r\n        this.setState({domNode: node});\r\n    },\r\n    render: function(){\r\n        //returns a div that we will use to measure the space we have and a <div> that we will size depending on the ratio given\r\n        return <div\r\n                    style={{height: \"100%\", width: \"100%\"}}\r\n                    ref={this.updateDOMRef}\r\n                >\r\n            <div style={this.state.style}>\r\n                {this.props.childComponents}\r\n            </div>\r\n        </div>\r\n    }\r\n});\r\n\r\nconst Cell = props => (\r\n    <div className={(props.status ? \"alive\" : \"dead\")}\r\n        style={props.style} />\r\n);\r\nvar Controls = React.createClass({\r\n    render: function(){\r\n        var vPad = \"3px\"\r\n        var hPad = \"5px\"\r\n        var elementStyle = {\r\n            verticalAlign: \"middle\",\r\n            margin: vPad + \" \" + hPad,\r\n            display: \"inline-block\"\r\n        };\r\n        var buttonStyle = Object.assign({}, elementStyle, {\r\n            fontSize: \"16px\",\r\n            backgroundColor: baseStyle.color,\r\n            color: baseStyle.backgroundColor,\r\n            border: \"none\",\r\n            cursor: \"pointer\",\r\n            padding: \"4px 9px\"\r\n        });\r\n        var textInputStyle = Object.assign({\r\n            border: \"none\",\r\n            fontSize: \"inherit\",\r\n            padding: vPad + \" \" + hPad,\r\n            textAlign: \"center\",\r\n            color: baseStyle.backgroundColor,\r\n            backgroundColor: baseStyle.color\r\n        }, elementStyle);\r\n        var sliderStyle = Object.assign({\r\n            margin: vPad + \" \" + hPad\r\n        }, elementStyle);\r\n        return <div id=\"controls\" style={{\r\n                            position: \"relative\",\r\n                            height: \"30%\",\r\n                            maxWidth: \"600px\",\r\n                            margin: \"auto\",\r\n                            fontSize: \"16px\",\r\n                            overflow: \"auto\",\r\n                            textAlign: \"center\",\r\n                            color: baseStyle.color\r\n                        }}>\r\n            <div className=\"controls-wrap\">\r\n                <label>Refresh Delay</label>\r\n                <input\r\n                    onChange={this.props.handleChange}\r\n                    className=\"slider\"\r\n                    type=\"range\"\r\n                    value={this.props.interval / 1000}\r\n                    name=\"interval\"\r\n                    min=\"0.05\"\r\n                    max=\"1\"\r\n                    step=\"0.05\"/>\r\n                <span>\r\n                    {(this.props.interval / 1000).toFixed(2)} seconds\r\n                    </span>\r\n            </div>\r\n            <div className=\"controls-wrap\" >\r\n                <span>Generations:</span>\r\n                <span style={{width: \"3em\"}}>{this.props.generations}</span>\r\n                <input\r\n                    style={buttonStyle}\r\n                    type=\"button\"\r\n                    onClick={this.props.handleChange}\r\n                    name=\"resetGenerations\"\r\n                    value=\"reset\" />\r\n            </div>\r\n            <div className=\"controls-wrap\">\r\n                <label>Pause</label>\r\n                <Switch\r\n                    onChange={this.props.handleChange}\r\n                    checked={this.props.pause}\r\n                    name=\"pause\" />\r\n            </div>\r\n            <div className=\"controls-wrap\">\r\n                <input\r\n                    className=\"button\"\r\n                    type=\"button\"\r\n                    onClick={this.props.handleChange}\r\n                    name=\"clear\"\r\n                    value=\"clear\" />\r\n            </div>\r\n            <div className=\"controls-wrap\">\r\n                <input\r\n                    className=\"button\"\r\n                    type=\"button\"\r\n                    onClick={this.props.handleChange}\r\n                    name=\"randomize\"\r\n                    value=\"randomize\" />\r\n                <input\r\n                    onChange={this.props.handleChange}\r\n                    className=\"slider\"\r\n                    type=\"range\"\r\n                    defaultValue={this.props.percentLife}\r\n                    name=\"percentLife\"\r\n                    min=\"0\"\r\n                    max=\"1\"\r\n                    step=\"0.01\" />\r\n                <span style={Object.assign({}, elementStyle, {textAlign: \"right\", width: \"38px\"})}>{(this.props.percentLife * 100).toFixed(0)}%</span>\r\n            </div>\r\n            <div className=\"controls-wrap\">\r\n                <span>\r\n                    Size:</span>\r\n                <input\r\n                    type=\"number\"\r\n                    className=\"text-input\"\r\n                    onChange={this.props.handleChange}\r\n                    name=\"width\"\r\n                    defaultValue={this.props.width} />\r\n                <span>x</span>\r\n                <input\r\n                    type=\"number\"\r\n                    className=\"text-input\"\r\n                    onChange={this.props.handleChange}\r\n                    name=\"height\"\r\n                    defaultValue={this.props.height} />\r\n                <input\r\n                    className=\"button\"\r\n                    type=\"button\"\r\n                    onClick={this.props.handleChange}\r\n                    name=\"applySize\"\r\n                    value=\"Apply\" />\r\n            </div>\r\n        </div>\r\n    }\r\n});\r\nconst Switch = props => (\r\n    <label style={Object.assign({}, props.style)} >\r\n        <input\r\n            type=\"checkbox\"\r\n            onChange={props.onChange}\r\n            checked={props.checked ? true : false}\r\n            name={props.name} />\r\n        <div ></div>\r\n    </label>\r\n);\r\nwindow.onload = function(){\r\n    ReactDOM.render(\r\n    <GameOfLife />,\r\n    document.getElementById(\"container\")\r\n    );\r\n};"]}